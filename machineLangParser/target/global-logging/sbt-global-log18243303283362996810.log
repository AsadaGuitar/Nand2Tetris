[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\d.takahashi\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\d.takahashi\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 16.0.1)
[debug]       Load.loadUnit: plugins took 115.1566ms
[debug]       Load.loadUnit: defsScala took 0.3102ms
[debug] [Loading] Scanning directory C:\Users\d.takahashi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\d.takahashi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.7791 ms
[debug]           Load.resolveProject(global-plugins) took 40.2108ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\d.takahashi\.sbt\1.0\plugins, plugins: List(<none>))) took 79.5524ms
[debug] [Loading] Done in C:\Users\d.takahashi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 103.0879ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.227ms
[debug]     Load.loadUnit(file:/C:/Users/d.takahashi/.sbt/1.0/plugins/, ...) took 228.2738ms
[debug]   Load.apply: load took 3755.6063ms
[debug]   Load.apply: resolveProjects took 5.7081ms
[debug]   Load.apply: finalTransforms took 69.3808ms
[debug]   Load.apply: config.delegates took 7.727ms
[debug]   Load.apply: Def.make(settings)... took 689.3032ms
[debug]   Load.apply: structureIndex took 162.7764ms
[debug]   Load.apply: mkStreams took 4.7738ms
[info] loading global plugins from C:\Users\d.takahashi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6362.24ms
[debug]           Load.loadUnit: plugins took 45.3866ms
[debug]           Load.loadUnit: defsScala took 0.0064ms
[debug] [Loading] Scanning directory C:\Users\d.takahashi\Document\Projects\cs\nand2tetris\machineLangParser\project
[debug]             Load.loadUnit: mkEval took 7.9046ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\d.takahashi\Document\Projects\cs\nand2tetris\machineLangParser\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.2197 ms
[info] loading settings for project machinelangparser-build from plugins.sbt,idea1.sbt ...
[debug]               Load.resolveProject(machinelangparser-build) took 3.444ms
[debug]             Load.loadTransitive: finalizeProject(Project(id machinelangparser-build, base: C:\Users\d.takahashi\Document\Projects\cs\nand2tetris\machineLangParser\project, plugins: List(<none>))) took 7.5084ms
[debug] [Loading] Done in C:\Users\d.takahashi\Document\Projects\cs\nand2tetris\machineLangParser\project, returning: (machinelangparser-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 157.1035ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.7271ms
[debug]         Load.loadUnit(file:/C:/Users/d.takahashi/Document/Projects/cs/nand2tetris/machineLangParser/project/, ...) took 212.7789ms
[debug]       Load.apply: load took 214.7609ms
[debug]       Load.apply: resolveProjects took 0.098ms
[debug]       Load.apply: finalTransforms took 11.6545ms
[debug]       Load.apply: config.delegates took 0.3528ms
[debug]       Load.apply: Def.make(settings)... took 119.1582ms
[debug]       Load.apply: structureIndex took 32.9763ms
[debug]       Load.apply: mkStreams took 0.002ms
[info] loading project definition from C:\Users\d.takahashi\Document\Projects\cs\nand2tetris\machineLangParser\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 695.5047ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\d.takahashi\Document\Projects\cs\nand2tetris\machineLangParser
[debug]       Load.loadUnit: mkEval took 0.4356ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7782 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 34.2666ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\d.takahashi\Document\Projects\cs\nand2tetris\machineLangParser, plugins: List(<none>))) took 37.5737ms
[debug] [Loading] Done in C:\Users\d.takahashi\Document\Projects\cs\nand2tetris\machineLangParser, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3141.4322ms
[debug]     Load.loadUnit: cleanEvalClasses took 44.7405ms
[debug]   Load.loadUnit(file:/C:/Users/d.takahashi/Document/Projects/cs/nand2tetris/machineLangParser/, ...) took 3882.8862ms
[debug] Load.apply: load took 3884.6917ms
[debug] Load.apply: resolveProjects took 0.0816ms
[debug] Load.apply: finalTransforms took 24.429ms
[debug] Load.apply: config.delegates took 0.3395ms
[debug] Load.apply: Def.make(settings)... took 71.2544ms
[debug] Load.apply: structureIndex took 24.8384ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to machineLangParser (in build file:/C:/Users/d.takahashi/Document/Projects/cs/nand2tetris/machineLangParser/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51428 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51428, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to machineLangParser (in build file:/C:/Users/d.takahashi/Document/Projects/cs/nand2tetris/machineLangParser/)
[debug] > Exec(idea-shell, None, None)
