[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/peace/Projects/Learning/cs/nand2tetris/assembler/assembler_ver.1.1/src/main/scala/assembler/Main.scala","languageId":"scala","version":2,"text":"package assembler\n\nimport cats._\nimport cats.data._\nimport cats.implicits._\nimport cats.effect.*\nimport cats.kernel.instances.all.*\n\nimport scala.collection.JavaConverters._\n\nimport java.io._\n\nimport assembler.module.ParserModule\nimport assembler.module.SymbolTableModule\n\nimport assembler.data.AssemblyLine.{_, given}\nimport assembler.data.Symbol.{_, given}\nimport assembler.data.Mnemonic.{_, given}\n\nimport lib._\nimport lib.syntax.IntSyntax.{_, given}\n\n\nobject Main extends IOApp, ParserModule, SymbolTableModule:\n  import cats.data.Validated._\n\n  def reader(path: String) = Resource.fromAutoCloseable(IO(new BufferedReader(new FileReader(path))))\n  def writer(path: String) = Resource.fromAutoCloseable(IO(new BufferedWriter(new FileWriter(path))))\n    \n  def validateAssembly(assembly: Vector[String]): ValidatedNec[String, List[PassedInstruction]] = \n    moldAssembly(assembly).zipWithIndex.map { (line, i) =>\n        parseAll(assemblyParser, line) match \n        case Success(value, _) => value.validNec\n        case NoSuccess(msg, _) => s\"syntax error, line ${i+1}: $msg.\".invalidNec\n        case Failure(msg, _)   => s\"failure, line ${i+1}: $msg.\".invalidNec\n        case Error(msg, _)     => s\"error, line ${i+1}: $msg.\".invalidNec\n    }.toList.sequence\n\n  def inputPathParser(string: String): Option[String] =\n    val temp = string.split(\"\\\\.\")\n    if 2 <= temp.length && temp(temp.length-1) === \"asm\" then\n      Some(temp.take(temp.length-1).mkString(\".\"))\n    else None\n\n  def run(args: List[String]): IO[ExitCode] =\n    val start = System.currentTimeMillis()\n    args.headOption match\n      case Some(inputPath) =>\n        inputPathParser(inputPath) match \n          case Some(inputPathName) => \n            val outputPath = inputPathName + \".hack\"\n            val readAssembly = reader(inputPath).use { bf =>\n              IO{ bf.lines.iterator().asScala.toVector }\n            }\n            readAssembly.flatMap{ assembly => \n              validateAssembly(assembly).map(assignAddress) match\n                case Invalid(messages) => IO { messages.map(println) }\n                case Valid(assigns)    => writer(outputPath).use { out => \n                  IO{ assigns.map{ instruction => \n                    out.write(instruction.binary16.toString) \n                    out.newLine()\n                  }}\n                }\n            }.handleErrorWith{ (e: Throwable) => \n              IO.println(e.getMessage)\n            } *> IO.println{\n              val end = System.currentTimeMillis()\n              s\"Time: ${end - start}\"\n            }.as(ExitCode.Success)\n          case _ => IO.println(\"Invalid input path.\").as(ExitCode.Success)\n      case None => IO.println(\"Not exist arguments.\").as(ExitCode.Success)\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/peace/Projects/Learning/cs/nand2tetris/assembler/assembler_ver.1.1/target/scala-3.1.2/zinc/inc_compile_3.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 2022/05/22 1:11:55[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
