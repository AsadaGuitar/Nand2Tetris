[0m[[0m[0mdebug[0m] [0m[0m[zinc] IncrementalCompile -----------[0m
[0m[[0m[0mdebug[0m] [0m[0mIncrementalCompile.incrementalCompile[0m
[0m[[0m[0mdebug[0m] [0m[0mprevious = Stamps for: 8 products, 8 sources, 9 libraries[0m
[0m[[0m[0mdebug[0m] [0m[0mcurrent source = Set(${BASE}/src/test/scala/assembler/module/SymbolTableModule.scala, ${BASE}/src/test/scala/assembler/data/SymbolSpec.scala, ${BASE}/src/test/scala/lib/syntax/IntSyntaxSpec.scala, ${BASE}/src/test/scala/assembler/data/MnemonicSpec.scala, ${BASE}/src/test/scala/assembler/module/ParserModuleSpec.scala, ${BASE}/src/test/scala/assembler/data/AssemblyLineSpec.scala, ${BASE}/src/test/scala/lib/syntax/OptionSyntaxSpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m> initialChanges = InitialChanges(Changes(added = Set(), removed = Set(${BASE}/src/test/scala/lib/syntax/StringSyntaxSpec.scala), changed = Set(), unmodified = ...),Set(),Set(),API Changes: Set(NamesChange(assembler.data.Mnemonic$Comp$,ModifiedNames(changes = UsedName(Comp;init;,[Default]), UsedName(binary,[Default]))), NamesChange(lib.BinaryConvertor$,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(BinaryConvertor;init;$,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(BinaryConvertor,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply,[Default]))), NamesChange(assembler.module.SymbolTableModule,ModifiedNames(changes = UsedName(Input,[Default]), UsedName(failure,[Default]), UsedName(success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$positioned,[Default]), UsedName(skipWhitespace,[Default]), UsedName(log,[Default]), UsedName(Error,[Default]), UsedName(repNM,[Default]), UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(chainr1,[Default]), UsedName(not,[Default]), UsedName(decimalNumber,[Default]), UsedName(positioned,[Default]), UsedName(stringLiteral,[Default]), UsedName(mkList,[Default]), UsedName(handleWhiteSpace,[Default]), UsedName(NoSuccess,[Default]), UsedName(guard,[Default]), UsedName(findSymbol,[Default]), UsedName(rep1,[Default]), UsedName(ident,[Default]), UsedName(ParseResult,[Default]), UsedName(err,[Default]), UsedName(floatingPointNumber,[Default]), UsedName(Elem,[Default]), UsedName(RegexParsers;init;,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$err,[Default]), UsedName(acceptIf,[Default]), UsedName(Success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$phrase,[Default]), UsedName(whiteSpace,[Default]), UsedName(Failure,[Default]), UsedName(elem,[Default]), UsedName(wholeNumber,[Default]), UsedName(parse,[Default]), UsedName(variableStart,[Default]), UsedName(AssemblySymbol,[Default]), UsedName(selectLastFailure,[Default]), UsedName(repsep,[Default]), UsedName(SymbolTableModule,[Default]), UsedName(JavaTokenParsers;init;,[Default]), UsedName(literal,[Implicit]), UsedName(acceptSeq,[Default]), UsedName(repNM$default$4,[Default]), UsedName(repN,[Default]), UsedName(OnceParser,[Default]), UsedName(opt,[Default]), UsedName(parseAll,[Default]), UsedName(acceptMatch,[Default]), UsedName(commit,[Default]), UsedName(rep,[Default]), UsedName(chainl1,[Default]), UsedName(rep1sep,[Default]), UsedName(Parser,[Default]), UsedName(SymbolTable,[Default]), UsedName(phrase,[Default]), UsedName(~,[Default]), UsedName(Parsers;init;,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedC,ModifiedNames(changes = UsedName(binary16,[Default]), UsedName(binary,[Default]))), NamesChange(lib.syntax.StringSyntax$,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(given_BinaryConvertor_String,[Default, Implicit]), UsedName(StringSyntax;init;$,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName(StringSyntax,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]))), NamesChange(lib.syntax.IntSyntax$,ModifiedNames(changes = UsedName(given_BinaryConvertor_Int,[Default, Implicit]), UsedName(toBinaryString,[Default]))), NamesChange(lib.syntax.StringSyntax$given_BinaryConvertor_String$,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(given_BinaryConvertor_String,[Default]), UsedName(given_BinaryConvertor_String;init;$,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]))), NamesChange(assembler.data.Mnemonic$Jump,ModifiedNames(changes = UsedName(binary,[Default]), UsedName(Jump;init;,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedInstruction,ModifiedNames(changes = UsedName(binary,[Default]), UsedName(binary16,[Default]))), NamesChange(assembler.module.SymbolTableModule$,ModifiedNames(changes = UsedName(Input,[Default]), UsedName(failure,[Default]), UsedName(success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$positioned,[Default]), UsedName(skipWhitespace,[Default]), UsedName(log,[Default]), UsedName(Error,[Default]), UsedName(repNM,[Default]), UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(chainr1,[Default]), UsedName(not,[Default]), UsedName(decimalNumber,[Default]), UsedName(positioned,[Default]), UsedName(stringLiteral,[Default]), UsedName(mkList,[Default]), UsedName(handleWhiteSpace,[Default]), UsedName(NoSuccess,[Default]), UsedName(guard,[Default]), UsedName(findSymbol,[Default]), UsedName(rep1,[Default]), UsedName(ident,[Default]), UsedName(ParseResult,[Default]), UsedName(err,[Default]), UsedName(floatingPointNumber,[Default]), UsedName(Elem,[Default]), UsedName(RegexParsers;init;,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$err,[Default]), UsedName(acceptIf,[Default]), UsedName(Success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$phrase,[Default]), UsedName(whiteSpace,[Default]), UsedName(Failure,[Default]), UsedName(elem,[Default]), UsedName(wholeNumber,[Default]), UsedName(parse,[Default]), UsedName(variableStart,[Default]), UsedName(AssemblySymbol,[Default]), UsedName(selectLastFailure,[Default]), UsedName(repsep,[Default]), UsedName(SymbolTableModule,[Default]), UsedName(JavaTokenParsers;init;,[Default]), UsedName(literal,[Implicit]), UsedName(acceptSeq,[Default]), UsedName(repNM$default$4,[Default]), UsedName(repN,[Default]), UsedName(OnceParser,[Default]), UsedName(opt,[Default]), UsedName(parseAll,[Default]), UsedName(acceptMatch,[Default]), UsedName(commit,[Default]), UsedName(rep,[Default]), UsedName(chainl1,[Default]), UsedName(rep1sep,[Default]), UsedName(Parser,[Default]), UsedName(SymbolTable,[Default]), UsedName(phrase,[Default]), UsedName(~,[Default]), UsedName(Parsers;init;,[Default]))), NamesChange(assembler.data.Symbol,ModifiedNames(changes = UsedName(Input,[Default]), UsedName(failure,[Default]), UsedName(success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$positioned,[Default]), UsedName(skipWhitespace,[Default]), UsedName(log,[Default]), UsedName(Error,[Default]), UsedName(repNM,[Default]), UsedName(Symbol,[Default]), UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(chainr1,[Default]), UsedName(not,[Default]), UsedName(decimalNumber,[Default]), UsedName(positioned,[Default]), UsedName(stringLiteral,[Default]), UsedName(mkList,[Default]), UsedName(handleWhiteSpace,[Default]), UsedName(NoSuccess,[Default]), UsedName(guard,[Default]), UsedName(rep1,[Default]), UsedName(ident,[Default]), UsedName(ParseResult,[Default]), UsedName(err,[Default]), UsedName(floatingPointNumber,[Default]), UsedName(Elem,[Default]), UsedName(RegexParsers;init;,[Default]), UsedName(findAddress,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$err,[Default]), UsedName(acceptIf,[Default]), UsedName(Success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$phrase,[Default]), UsedName(whiteSpace,[Default]), UsedName(Failure,[Default]), UsedName(elem,[Default]), UsedName(wholeNumber,[Default]), UsedName(parse,[Default]), UsedName(selectLastFailure,[Default]), UsedName(repsep,[Default]), UsedName(JavaTokenParsers;init;,[Default]), UsedName(literal,[Implicit]), UsedName(acceptSeq,[Default]), UsedName(repNM$default$4,[Default]), UsedName(repN,[Default]), UsedName(OnceParser,[Default]), UsedName(opt,[Default]), UsedName(parseAll,[Default]), UsedName(acceptMatch,[Default]), UsedName(commit,[Default]), UsedName(rep,[Default]), UsedName(chainl1,[Default]), UsedName(rep1sep,[Default]), UsedName(Parser,[Default]), UsedName(phrase,[Default]), UsedName(~,[Default]), UsedName(Parsers;init;,[Default]))), NamesChange(assembler.data.Mnemonic$Comp,ModifiedNames(changes = UsedName(Comp;init;,[Default]), UsedName(binary,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedA$,ModifiedNames(changes = UsedName(_1,[Default]), UsedName(number,[Default]), UsedName(copy$default$1,[Default]), UsedName(binary16,[Default]), UsedName(AssignedA;init;,[Default]), UsedName(binary,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]))), NamesChange(assembler.data.Mnemonic$Jump$,ModifiedNames(changes = UsedName(binary,[Default]), UsedName(Jump;init;,[Default]))), NamesChange(assembler.data.Mnemonic$Dest,ModifiedNames(changes = UsedName(Dest;init;,[Default]), UsedName(binary,[Default]))), NamesChange(lib.BinaryConvertor,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(BinaryConvertor;init;$,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(BinaryConvertor,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedA,ModifiedNames(changes = UsedName(_1,[Default]), UsedName(number,[Default]), UsedName(copy$default$1,[Default]), UsedName(binary16,[Default]), UsedName(AssignedA;init;,[Default]), UsedName(binary,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedC$,ModifiedNames(changes = UsedName(binary16,[Default]), UsedName(binary,[Default]))), NamesChange(assembler.data.Mnemonic$Dest$,ModifiedNames(changes = UsedName(Dest;init;,[Default]), UsedName(binary,[Default]))), NamesChange(assembler.data.Symbol$,ModifiedNames(changes = UsedName(Input,[Default]), UsedName(failure,[Default]), UsedName(success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$positioned,[Default]), UsedName(skipWhitespace,[Default]), UsedName(log,[Default]), UsedName(Error,[Default]), UsedName(repNM,[Default]), UsedName(Symbol,[Default]), UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(chainr1,[Default]), UsedName(not,[Default]), UsedName(decimalNumber,[Default]), UsedName(positioned,[Default]), UsedName(stringLiteral,[Default]), UsedName(mkList,[Default]), UsedName(handleWhiteSpace,[Default]), UsedName(NoSuccess,[Default]), UsedName(guard,[Default]), UsedName(rep1,[Default]), UsedName(ident,[Default]), UsedName(ParseResult,[Default]), UsedName(err,[Default]), UsedName(floatingPointNumber,[Default]), UsedName(Elem,[Default]), UsedName(RegexParsers;init;,[Default]), UsedName(findAddress,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$err,[Default]), UsedName(acceptIf,[Default]), UsedName(Success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$phrase,[Default]), UsedName(whiteSpace,[Default]), UsedName(Failure,[Default]), UsedName(elem,[Default]), UsedName(wholeNumber,[Default]), UsedName(parse,[Default]), UsedName(selectLastFailure,[Default]), UsedName(repsep,[Default]), UsedName(JavaTokenParsers;init;,[Default]), UsedName(literal,[Implicit]), UsedName(acceptSeq,[Default]), UsedName(repNM$default$4,[Default]), UsedName(repN,[Default]), UsedName(OnceParser,[Default]), UsedName(opt,[Default]), UsedName(parseAll,[Default]), UsedName(acceptMatch,[Default]), UsedName(commit,[Default]), UsedName(rep,[Default]), UsedName(chainl1,[Default]), UsedName(rep1sep,[Default]), UsedName(Parser,[Default]), UsedName(phrase,[Default]), UsedName(~,[Default]), UsedName(Parsers;init;,[Default]))), NamesChange(assembler.data.Mnemonic$,ModifiedNames(changes = UsedName(StringToBinary16,[Default, Implicit]))), NamesChange(lib.syntax.IntSyntax$given_BinaryConvertor_Int$,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(given_BinaryConvertor_Int;init;$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(given_BinaryConvertor_Int,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default])))))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.Mnemonic$Comp$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Comp;init;,[Default]), UsedName(binary,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.Mnemonic$Comp$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.Mnemonic$Comp$.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.data.IntSyntaxSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.SymbolTableModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.ParserModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe lib.BinaryConvertor$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(BinaryConvertor;init;$,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(BinaryConvertor,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) lib.BinaryConvertor$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) lib.BinaryConvertor$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of lib.syntax.IntSyntaxSpec: [BinaryConvertor, apply, binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of lib.syntax.StringSyntaxSpec: [BinaryConvertor, apply, binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.module.SymbolTableModule has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(literal,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.module.SymbolTableModule: Set(assembler.module.SymbolTableModuleSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from assembler.module.SymbolTableModuleSpec...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: assembler.module.SymbolTableModuleSpec[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(assembler.module.SymbolTableModuleSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.module.SymbolTableModule.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of assembler.module.SymbolTableModule are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.module.SymbolTableModuleSpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.AssemblyLine$AssignedC has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(binary16,[Default]), UsedName(binary,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.AssemblyLine$AssignedC: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.AssemblyLine$AssignedC.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.SymbolTableModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.ParserModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe lib.syntax.StringSyntax$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(given_BinaryConvertor_String,[Default, Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) lib.syntax.StringSyntax$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) lib.syntax.StringSyntax$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of lib.syntax.StringSyntax$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	lib.syntax.StringSyntaxSpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe lib.syntax.IntSyntax$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(given_BinaryConvertor_Int,[Default, Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) lib.syntax.IntSyntax$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) lib.syntax.IntSyntax$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of lib.syntax.IntSyntax$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.data.AssemblyLineSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	lib.syntax.IntSyntaxSpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe lib.syntax.StringSyntax$given_BinaryConvertor_String$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(given_BinaryConvertor_String,[Default]), UsedName(given_BinaryConvertor_String;init;$,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) lib.syntax.StringSyntax$given_BinaryConvertor_String$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) lib.syntax.StringSyntax$given_BinaryConvertor_String$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of lib.syntax.StringSyntaxSpec: [given_BinaryConvertor_String, binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.Mnemonic$Jump has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(binary,[Default]), UsedName(Jump;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.Mnemonic$Jump: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.Mnemonic$Jump.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.data.IntSyntaxSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.SymbolTableModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.ParserModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.AssemblyLine$AssignedInstruction has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(binary,[Default]), UsedName(binary16,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.AssemblyLine$AssignedInstruction: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.AssemblyLine$AssignedInstruction.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.SymbolTableModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.module.SymbolTableModule$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(literal,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.module.SymbolTableModule$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.module.SymbolTableModule$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of assembler.module.SymbolTableModule$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.module.SymbolTableModuleSpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.Symbol has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(literal,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.Symbol: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.Symbol.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of assembler.data.Symbol are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.module.SymbolTableModuleSpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.Mnemonic$Comp has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Comp;init;,[Default]), UsedName(binary,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.Mnemonic$Comp: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.Mnemonic$Comp.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.data.IntSyntaxSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.SymbolTableModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.ParserModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.AssemblyLine$AssignedA$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(_1,[Default]), UsedName(number,[Default]), UsedName(copy$default$1,[Default]), UsedName(binary16,[Default]), UsedName(AssignedA;init;,[Default]), UsedName(binary,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.AssemblyLine$AssignedA$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.AssemblyLine$AssignedA$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.module.SymbolTableModuleSpec: [apply][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [apply, binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.Mnemonic$Jump$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(binary,[Default]), UsedName(Jump;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.Mnemonic$Jump$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.Mnemonic$Jump$.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.data.IntSyntaxSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.SymbolTableModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.ParserModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.Mnemonic$Dest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Dest;init;,[Default]), UsedName(binary,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.Mnemonic$Dest: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.Mnemonic$Dest.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.data.IntSyntaxSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.SymbolTableModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.ParserModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe lib.BinaryConvertor has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(BinaryConvertor;init;$,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(BinaryConvertor,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) lib.BinaryConvertor: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) lib.BinaryConvertor.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of lib.syntax.IntSyntaxSpec: [BinaryConvertor, apply, binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of lib.syntax.StringSyntaxSpec: [BinaryConvertor, apply, binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.AssemblyLine$AssignedA has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(_1,[Default]), UsedName(number,[Default]), UsedName(copy$default$1,[Default]), UsedName(binary16,[Default]), UsedName(AssignedA;init;,[Default]), UsedName(binary,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.AssemblyLine$AssignedA: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.AssemblyLine$AssignedA.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.module.SymbolTableModuleSpec: [apply][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [apply, binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.AssemblyLine$AssignedC$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(binary16,[Default]), UsedName(binary,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.AssemblyLine$AssignedC$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.AssemblyLine$AssignedC$.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.SymbolTableModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.ParserModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.Mnemonic$Dest$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Dest;init;,[Default]), UsedName(binary,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.Mnemonic$Dest$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.Mnemonic$Dest$.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.data.IntSyntaxSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.SymbolTableModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of assembler.module.ParserModuleSpec. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of assembler.data.AssemblyLineSpec: [binary][0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.Symbol$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(literal,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.Symbol$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.Symbol$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of assembler.data.Symbol$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.data.SymbolSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.module.ParserModuleSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.module.SymbolTableModuleSpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe assembler.data.Mnemonic$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(StringToBinary16,[Default, Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) assembler.data.Mnemonic$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) assembler.data.Mnemonic$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of assembler.data.Mnemonic$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.data.AssemblyLineSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.data.IntSyntaxSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.data.SymbolSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.module.ParserModuleSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	assembler.module.SymbolTableModuleSpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe lib.syntax.IntSyntax$given_BinaryConvertor_Int$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(given_BinaryConvertor_Int;init;$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(given_BinaryConvertor_Int,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) lib.syntax.IntSyntax$given_BinaryConvertor_Int$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) lib.syntax.IntSyntax$given_BinaryConvertor_Int$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of lib.syntax.IntSyntaxSpec: [binary, given_BinaryConvertor_Int][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	removed: Set(${BASE}/src/test/scala/lib/syntax/StringSyntaxSpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(assembler.data.Mnemonic$Comp$,ModifiedNames(changes = UsedName(Comp;init;,[Default]), UsedName(binary,[Default]))), NamesChange(lib.BinaryConvertor$,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(BinaryConvertor;init;$,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(BinaryConvertor,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply,[Default]))), NamesChange(assembler.module.SymbolTableModule,ModifiedNames(changes = UsedName(Input,[Default]), UsedName(failure,[Default]), UsedName(success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$positioned,[Default]), UsedName(skipWhitespace,[Default]), UsedName(log,[Default]), UsedName(Error,[Default]), UsedName(repNM,[Default]), UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(chainr1,[Default]), UsedName(not,[Default]), UsedName(decimalNumber,[Default]), UsedName(positioned,[Default]), UsedName(stringLiteral,[Default]), UsedName(mkList,[Default]), UsedName(handleWhiteSpace,[Default]), UsedName(NoSuccess,[Default]), UsedName(guard,[Default]), UsedName(findSymbol,[Default]), UsedName(rep1,[Default]), UsedName(ident,[Default]), UsedName(ParseResult,[Default]), UsedName(err,[Default]), UsedName(floatingPointNumber,[Default]), UsedName(Elem,[Default]), UsedName(RegexParsers;init;,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$err,[Default]), UsedName(acceptIf,[Default]), UsedName(Success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$phrase,[Default]), UsedName(whiteSpace,[Default]), UsedName(Failure,[Default]), UsedName(elem,[Default]), UsedName(wholeNumber,[Default]), UsedName(parse,[Default]), UsedName(variableStart,[Default]), UsedName(AssemblySymbol,[Default]), UsedName(selectLastFailure,[Default]), UsedName(repsep,[Default]), UsedName(SymbolTableModule,[Default]), UsedName(JavaTokenParsers;init;,[Default]), UsedName(literal,[Implicit]), UsedName(acceptSeq,[Default]), UsedName(repNM$default$4,[Default]), UsedName(repN,[Default]), UsedName(OnceParser,[Default]), UsedName(opt,[Default]), UsedName(parseAll,[Default]), UsedName(acceptMatch,[Default]), UsedName(commit,[Default]), UsedName(rep,[Default]), UsedName(chainl1,[Default]), UsedName(rep1sep,[Default]), UsedName(Parser,[Default]), UsedName(SymbolTable,[Default]), UsedName(phrase,[Default]), UsedName(~,[Default]), UsedName(Parsers;init;,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedC,ModifiedNames(changes = UsedName(binary16,[Default]), UsedName(binary,[Default]))), NamesChange(lib.syntax.StringSyntax$,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(given_BinaryConvertor_String,[Default, Implicit]), UsedName(StringSyntax;init;$,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName(StringSyntax,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]))), NamesChange(lib.syntax.IntSyntax$,ModifiedNames(changes = UsedName(given_BinaryConvertor_Int,[Default, Implicit]), UsedName(toBinaryString,[Default]))), NamesChange(lib.syntax.StringSyntax$given_BinaryConvertor_String$,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(given_BinaryConvertor_String,[Default]), UsedName(given_BinaryConvertor_String;init;$,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]))), NamesChange(assembler.data.Mnemonic$Jump,ModifiedNames(changes = UsedName(binary,[Default]), UsedName(Jump;init;,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedInstruction,ModifiedNames(changes = UsedName(binary,[Default]), UsedName(binary16,[Default]))), NamesChange(assembler.module.SymbolTableModule$,ModifiedNames(changes = UsedName(Input,[Default]), UsedName(failure,[Default]), UsedName(success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$positioned,[Default]), UsedName(skipWhitespace,[Default]), UsedName(log,[Default]), UsedName(Error,[Default]), UsedName(repNM,[Default]), UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(chainr1,[Default]), UsedName(not,[Default]), UsedName(decimalNumber,[Default]), UsedName(positioned,[Default]), UsedName(stringLiteral,[Default]), UsedName(mkList,[Default]), UsedName(handleWhiteSpace,[Default]), UsedName(NoSuccess,[Default]), UsedName(guard,[Default]), UsedName(findSymbol,[Default]), UsedName(rep1,[Default]), UsedName(ident,[Default]), UsedName(ParseResult,[Default]), UsedName(err,[Default]), UsedName(floatingPointNumber,[Default]), UsedName(Elem,[Default]), UsedName(RegexParsers;init;,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$err,[Default]), UsedName(acceptIf,[Default]), UsedName(Success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$phrase,[Default]), UsedName(whiteSpace,[Default]), UsedName(Failure,[Default]), UsedName(elem,[Default]), UsedName(wholeNumber,[Default]), UsedName(parse,[Default]), UsedName(variableStart,[Default]), UsedName(AssemblySymbol,[Default]), UsedName(selectLastFailure,[Default]), UsedName(repsep,[Default]), UsedName(SymbolTableModule,[Default]), UsedName(JavaTokenParsers;init;,[Default]), UsedName(literal,[Implicit]), UsedName(acceptSeq,[Default]), UsedName(repNM$default$4,[Default]), UsedName(repN,[Default]), UsedName(OnceParser,[Default]), UsedName(opt,[Default]), UsedName(parseAll,[Default]), UsedName(acceptMatch,[Default]), UsedName(commit,[Default]), UsedName(rep,[Default]), UsedName(chainl1,[Default]), UsedName(rep1sep,[Default]), UsedName(Parser,[Default]), UsedName(SymbolTable,[Default]), UsedName(phrase,[Default]), UsedName(~,[Default]), UsedName(Parsers;init;,[Default]))), NamesChange(assembler.data.Symbol,ModifiedNames(changes = UsedName(Input,[Default]), UsedName(failure,[Default]), UsedName(success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$positioned,[Default]), UsedName(skipWhitespace,[Default]), UsedName(log,[Default]), UsedName(Error,[Default]), UsedName(repNM,[Default]), UsedName(Symbol,[Default]), UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(chainr1,[Default]), UsedName(not,[Default]), UsedName(decimalNumber,[Default]), UsedName(positioned,[Default]), UsedName(stringLiteral,[Default]), UsedName(mkList,[Default]), UsedName(handleWhiteSpace,[Default]), UsedName(NoSuccess,[Default]), UsedName(guard,[Default]), UsedName(rep1,[Default]), UsedName(ident,[Default]), UsedName(ParseResult,[Default]), UsedName(err,[Default]), UsedName(floatingPointNumber,[Default]), UsedName(Elem,[Default]), UsedName(RegexParsers;init;,[Default]), UsedName(findAddress,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$err,[Default]), UsedName(acceptIf,[Default]), UsedName(Success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$phrase,[Default]), UsedName(whiteSpace,[Default]), UsedName(Failure,[Default]), UsedName(elem,[Default]), UsedName(wholeNumber,[Default]), UsedName(parse,[Default]), UsedName(selectLastFailure,[Default]), UsedName(repsep,[Default]), UsedName(JavaTokenParsers;init;,[Default]), UsedName(literal,[Implicit]), UsedName(acceptSeq,[Default]), UsedName(repNM$default$4,[Default]), UsedName(repN,[Default]), UsedName(OnceParser,[Default]), UsedName(opt,[Default]), UsedName(parseAll,[Default]), UsedName(acceptMatch,[Default]), UsedName(commit,[Default]), UsedName(rep,[Default]), UsedName(chainl1,[Default]), UsedName(rep1sep,[Default]), UsedName(Parser,[Default]), UsedName(phrase,[Default]), UsedName(~,[Default]), UsedName(Parsers;init;,[Default]))), NamesChange(assembler.data.Mnemonic$Comp,ModifiedNames(changes = UsedName(Comp;init;,[Default]), UsedName(binary,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedA$,ModifiedNames(changes = UsedName(_1,[Default]), UsedName(number,[Default]), UsedName(copy$default$1,[Default]), UsedName(binary16,[Default]), UsedName(AssignedA;init;,[Default]), UsedName(binary,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]))), NamesChange(assembler.data.Mnemonic$Jump$,ModifiedNames(changes = UsedName(binary,[Default]), UsedName(Jump;init;,[Default]))), NamesChange(assembler.data.Mnemonic$Dest,ModifiedNames(changes = UsedName(Dest;init;,[Default]), UsedName(binary,[Default]))), NamesChange(lib.BinaryConvertor,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(BinaryConvertor;init;$,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($asInstanceOf,[Default]), UsedName(BinaryConvertor,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedA,ModifiedNames(changes = UsedName(_1,[Default]), UsedName(number,[Default]), UsedName(copy$default$1,[Default]), UsedName(binary16,[Default]), UsedName(AssignedA;init;,[Default]), UsedName(binary,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]))), NamesChange(assembler.data.AssemblyLine$AssignedC$,ModifiedNames(changes = UsedName(binary16,[Default]), UsedName(binary,[Default]))), NamesChange(assembler.data.Mnemonic$Dest$,ModifiedNames(changes = UsedName(Dest;init;,[Default]), UsedName(binary,[Default]))), NamesChange(assembler.data.Symbol$,ModifiedNames(changes = UsedName(Input,[Default]), UsedName(failure,[Default]), UsedName(success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$positioned,[Default]), UsedName(skipWhitespace,[Default]), UsedName(log,[Default]), UsedName(Error,[Default]), UsedName(repNM,[Default]), UsedName(Symbol,[Default]), UsedName(accept,[Default, Implicit]), UsedName(regex,[Implicit]), UsedName(chainr1,[Default]), UsedName(not,[Default]), UsedName(decimalNumber,[Default]), UsedName(positioned,[Default]), UsedName(stringLiteral,[Default]), UsedName(mkList,[Default]), UsedName(handleWhiteSpace,[Default]), UsedName(NoSuccess,[Default]), UsedName(guard,[Default]), UsedName(rep1,[Default]), UsedName(ident,[Default]), UsedName(ParseResult,[Default]), UsedName(err,[Default]), UsedName(floatingPointNumber,[Default]), UsedName(Elem,[Default]), UsedName(RegexParsers;init;,[Default]), UsedName(findAddress,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$err,[Default]), UsedName(acceptIf,[Default]), UsedName(Success,[Default]), UsedName(scala$util$parsing$combinator$RegexParsers$$super$phrase,[Default]), UsedName(whiteSpace,[Default]), UsedName(Failure,[Default]), UsedName(elem,[Default]), UsedName(wholeNumber,[Default]), UsedName(parse,[Default]), UsedName(selectLastFailure,[Default]), UsedName(repsep,[Default]), UsedName(JavaTokenParsers;init;,[Default]), UsedName(literal,[Implicit]), UsedName(acceptSeq,[Default]), UsedName(repNM$default$4,[Default]), UsedName(repN,[Default]), UsedName(OnceParser,[Default]), UsedName(opt,[Default]), UsedName(parseAll,[Default]), UsedName(acceptMatch,[Default]), UsedName(commit,[Default]), UsedName(rep,[Default]), UsedName(chainl1,[Default]), UsedName(rep1sep,[Default]), UsedName(Parser,[Default]), UsedName(phrase,[Default]), UsedName(~,[Default]), UsedName(Parsers;init;,[Default]))), NamesChange(assembler.data.Mnemonic$,ModifiedNames(changes = UsedName(StringToBinary16,[Default, Implicit]))), NamesChange(lib.syntax.IntSyntax$given_BinaryConvertor_Int$,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(Object;init;,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(!=,[Default]), UsedName(binary,[Default]), UsedName(notifyAll,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(equals,[Default]), UsedName(given_BinaryConvertor_Int;init;$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(given_BinaryConvertor_Int,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(BinaryConvertor;init;,[Default]), UsedName(synchronized,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(lib.syntax.StringSyntaxSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set(lib.syntax.IntSyntaxSpec, assembler.data.IntSyntaxSpec, assembler.module.SymbolTableModuleSpec, assembler.module.ParserModuleSpec, assembler.data.SymbolSpec, assembler.data.AssemblyLineSpec, lib.syntax.StringSyntaxSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(lib.syntax.IntSyntaxSpec, assembler.data.IntSyntaxSpec, assembler.module.SymbolTableModuleSpec, assembler.module.ParserModuleSpec, assembler.data.SymbolSpec, assembler.data.AssemblyLineSpec, lib.syntax.StringSyntaxSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lib.syntax.IntSyntaxSpec, assembler.data.IntSyntaxSpec, assembler.module.SymbolTableModuleSpec, assembler.module.ParserModuleSpec, assembler.data.SymbolSpec, assembler.data.AssemblyLineSpec, lib.syntax.StringSyntaxSpec[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all sources: number of invalidated sources > 50.0% of all sources[0m
[0m[[0m[0mdebug[0m] [0m[0mcompilation cycle 1[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 7 Scala sources to /Users/peace/Projects/Learning/cs/nand2tetris/assembler_ver.1.1/target/scala-3.1.2/test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mReturning already retrieved and compiled bridge: /Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-sbt-bridge/3.1.2/scala3-sbt-bridge-3.1.2.jar.[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 49a8c12a for Scala Compiler version 3.1.2[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.1.2/scala3-library_3-3.1.2.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.8/scala-library-2.13.8.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Users/peace/Projects/Learning/cs/nand2tetris/assembler_ver.1.1/target/scala-3.1.2/test-classes:/Users/peace/Projects/Learning/cs/nand2tetris/assembler_ver.1.1/target/scala-3.1.2/classes:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/munit_3/0.7.29/munit_3-0.7.29.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-effect_3/3.2.5/cats-effect_3-3.2.5.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-core_3/2.7.0/cats-core_3-2.7.0.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_3/2.1.1/scala-parser-combinators_3-2.1.1.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest_3/3.2.12/scalatest_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/junit-interface/0.7.29/junit-interface-0.7.29.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-effect-kernel_3/3.2.5/cats-effect-kernel_3-3.2.5.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-effect-std_3/3.2.5/cats-effect-std_3-3.2.5.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-kernel_3/2.7.0/cats-kernel_3-2.7.0.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/typelevel/simulacrum-scalafix-annotations_3/0.5.4/simulacrum-scalafix-annotations_3-0.5.4.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-core_3/3.2.12/scalatest-core_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-featurespec_3/3.2.12/scalatest-featurespec_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-flatspec_3/3.2.12/scalatest-flatspec_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-freespec_3/3.2.12/scalatest-freespec_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-funsuite_3/3.2.12/scalatest-funsuite_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-funspec_3/3.2.12/scalatest-funspec_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-propspec_3/3.2.12/scalatest-propspec_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-refspec_3/3.2.12/scalatest-refspec_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-wordspec_3/3.2.12/scalatest-wordspec_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-diagrams_3/3.2.12/scalatest-diagrams_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-matchers-core_3/3.2.12/scalatest-matchers-core_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-shouldmatchers_3/3.2.12/scalatest-shouldmatchers_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-mustmatchers_3/3.2.12/scalatest-mustmatchers_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-sbt/test-interface/1.0/test-interface-1.0.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalactic/scalactic_3/3.2.12/scalactic_3-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest-compatible/3.2.12/scalatest-compatible-3.2.12.jar:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_3/2.1.0/scala-xml_3-2.1.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mCompilation failed[0m
[0m[[0m[31merror[0m] [0m[0m(Test / [31mcompileIncremental[0m) Compilation failed[0m
